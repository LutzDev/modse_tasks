/**
 * generated by Xtext 2.25.0
 */
package org.xtext.aufgabe4.jsondsl.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.aufgabe4.jsondsl.jsonDsl.JSON_Document;

@ExtendWith(InjectionExtension.class)
@InjectWith(JsonDslInjectorProvider.class)
@SuppressWarnings("all")
public class JsonDslParsingTest {
  @Inject
  private ParseHelper<JSON_Document> parseHelper;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("{\"value\" : \"Model\"}");
      _builder.newLine();
      final JSON_Document json = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(json);
      final EList<Resource.Diagnostic> errors = json.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void parseDocument() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("{\"value\" : \"Model\"}");
      _builder.newLine();
      final JSON_Document json = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(json);
      final EList<Resource.Diagnostic> errors = json.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void parseArray() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\"array1\": [\"pos0\", \"pos1\", \"pos2\"],");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\"array2\": [");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("\"pos1\", ");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("\"pos2\", ");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("4,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("\"key1\": 4,");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("\"key2\": \"value1\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("]");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final JSON_Document json_array = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(json_array);
      final EList<Resource.Diagnostic> errors = json_array.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void parseString() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\"key\": \"value1\",");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\"key2\": \"value 2\"");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final JSON_Document json_string = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(json_string);
      final EList<Resource.Diagnostic> errors = json_string.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void parseNumber() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\"key\": 10,");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\"key\": 10.2");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final JSON_Document json_number = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(json_number);
      final EList<Resource.Diagnostic> errors = json_number.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void parseObject() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\"object1\": {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\"key1\": \"value1\",");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\"key2\": 4");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("},");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\"object2\": {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\"key1\": [\"pos1\", \"pos2\", 4],");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\"key2\": \"value\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final JSON_Document json_object = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(json_object);
      final EList<Resource.Diagnostic> errors = json_object.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void parseValue() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\"Number\"");
      _builder.newLine();
      final JSON_Document json_value = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(json_value);
      final EList<Resource.Diagnostic> errors = json_value.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void parseBoolean() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\"key\": false,");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\"key2\": [false, true, null]");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final JSON_Document json_object = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(json_object);
      final EList<Resource.Diagnostic> errors = json_object.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void parseWeather() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("\"message\": \"accurate\",");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("\"cod\": \"200\",");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("\"count\": 5,");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("\"list\": [");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"id\": 2923521,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"name\": \"Furtwangen im Schwarzwald\",");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"coord\": {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"lat\": 48.05,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"lon\": 8.2");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"main\": {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"temp\": 273.7,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"feels_like\": 270.29,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"temp_min\": 272.59,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"temp_max\": 274.82,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"pressure\": 1028,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"humidity\": 82");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"dt\": 1614582420,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"wind\": {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"speed\": 1.61,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"deg\": 114");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"sys\": { \"country\": \"DE\" },");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"rain\": null,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"snow\": null,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"clouds\": { \"all\": 0 },");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"weather\": [");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"id\": 800,");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"main\": \"Clear\",");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"description\": \"clear sky\",");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"icon\": \"01d\"");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("]");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"id\": 2944845,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"name\": \"Breg\",");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"coord\": {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"lat\": 48.05,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"lon\": 8.2");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"main\": {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"temp\": 273.7,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"feels_like\": 270.29,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"temp_min\": 272.59,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"temp_max\": 274.82,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"pressure\": 1028,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"humidity\": 82");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"dt\": 1614582420,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"wind\": {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"speed\": 1.61,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"deg\": 114");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"sys\": { \"country\": \"DE\" },");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"rain\": null,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"snow\": null,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"clouds\": { \"all\": 0 },");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"weather\": [");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"id\": 800,");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"main\": \"Clear\",");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"description\": \"clear sky\",");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"icon\": \"01d\"");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("]");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"id\": 2898135,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"name\": \"Hübschental\",");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"coord\": {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"lat\": 48.05,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"lon\": 8.15");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"main\": {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"temp\": 273.7,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"feels_like\": 270.26,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"temp_min\": 272.59,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"temp_max\": 274.82,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"pressure\": 1028,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"humidity\": 82");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"dt\": 1614582416,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"wind\": {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"speed\": 1.66,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"deg\": 114");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"sys\": { \"country\": \"DE\" },");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"rain\": null,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"snow\": null,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"clouds\": { \"all\": 0 },");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"weather\": [");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"id\": 800,");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"main\": \"Clear\",");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"description\": \"clear sky\",");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"icon\": \"01d\"");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("]");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"id\": 2913414,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"name\": \"Gütenbach\",");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"coord\": {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"lat\": 48.05,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"lon\": 8.15");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"main\": {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"temp\": 273.7,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"feels_like\": 270.26,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"temp_min\": 272.59,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"temp_max\": 274.82,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"pressure\": 1028,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"humidity\": 82");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"dt\": 1614582416,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"wind\": {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"speed\": 1.66,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"deg\": 114");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"sys\": { \"country\": \"DE\" },");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"rain\": null,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"snow\": null,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"clouds\": { \"all\": 0 },");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"weather\": [");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"id\": 800,");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"main\": \"Clear\",");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"description\": \"clear sky\",");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"icon\": \"01d\"");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("]");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"id\": 6555822,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"name\": \"Gütenbach\",");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"coord\": {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"lat\": 48.05,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"lon\": 8.15");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"main\": {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"temp\": 273.7,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"feels_like\": 270.26,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"temp_min\": 272.59,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"temp_max\": 274.82,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"pressure\": 1028,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"humidity\": 82");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"dt\": 1614582883,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"wind\": {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"speed\": 1.66,");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("\"deg\": 114");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("},");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"sys\": { \"country\": \"DE\" },");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"rain\": null,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"snow\": null,");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"clouds\": { \"all\": 0 },");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("\"weather\": [");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"id\": 800,");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"main\": \"Clear\",");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"description\": \"clear sky\",");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("\"icon\": \"01d\"");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("]");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("]");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final JSON_Document json_weather = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(json_weather);
      final EList<Resource.Diagnostic> errors = json_weather.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
