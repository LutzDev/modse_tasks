/*
 * generated by Xtext 2.25.0
 */
package org.xtext.aufgabe4.jsondsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.aufgabe4.jsondsl.jsonDsl.JSON_Document

@ExtendWith(InjectionExtension)
@InjectWith(JsonDslInjectorProvider)
class JsonDslParsingTest {
	@Inject
	ParseHelper<JSON_Document> parseHelper

	
	@Test
	def void loadModel() {
		val json = parseHelper.parse('''
			{"value" : "Model"}
		''')
		Assertions.assertNotNull(json)
		val errors = json.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	
	//---------
	
	@Test 
	def void parseDocument(){
		val json = parseHelper.parse('''
			{"value" : "Model"}
		''')
		Assertions.assertNotNull(json)
		val errors = json.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test 
	def void parseArray(){
		val json_array = parseHelper.parse('''
			{
				"array1": ["pos0", "pos1", "pos2"],
				"array2": [
							"pos1", 
							"pos2", 
							4,
							{
								"key1": 4,
								"key2": "value1"
							}
						]
			}
		''')
		
		Assertions.assertNotNull(json_array)
		val errors = json_array.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test 
	def void parseString(){
		val json_string = parseHelper.parse('''
			{
				"key": "value1",
				"key2": "value 2"
			}
		''')
		Assertions.assertNotNull(json_string)
		val errors = json_string.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	//!!!Exponential
	@Test 
	def void parseNumber(){
		val json_number = parseHelper.parse('''
			{
				"key": 10,
				"key": 10.2
			}
		''')
		Assertions.assertNotNull(json_number)
		val errors = json_number.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test 
	def void parseObject(){
		val json_object = parseHelper.parse('''
			{
				"object1": {
					"key1": "value1",
					"key2": 4
				},
				"object2": {
					"key1": ["pos1", "pos2", 4],
					"key2": "value"
				}
			}
		''')
		Assertions.assertNotNull(json_object)
		val errors = json_object.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test 
	def void parseValue(){
		val json_value = parseHelper.parse('''
			"Number"
		''')
		Assertions.assertNotNull(json_value)
		val errors = json_value.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test 
	def void parseBoolean(){
		val json_object = parseHelper.parse('''
			{
				"key": false,
				"key2": [false, true, null]
			}
		''')
		Assertions.assertNotNull(json_object)
		val errors = json_object.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	
	//Oder Im projekt öffnen
	@Test
	def void parseWeather(){
		val json_weather = parseHelper.parse(
			'''
			{
			    "message": "accurate",
			    "cod": "200",
			    "count": 5,
			    "list": [
			        {
			            "id": 2923521,
			            "name": "Furtwangen im Schwarzwald",
			            "coord": {
			                "lat": 48.05,
			                "lon": 8.2
			            },
			            "main": {
			                "temp": 273.7,
			                "feels_like": 270.29,
			                "temp_min": 272.59,
			                "temp_max": 274.82,
			                "pressure": 1028,
			                "humidity": 82
			            },
			            "dt": 1614582420,
			            "wind": {
			                "speed": 1.61,
			                "deg": 114
			            },
			            "sys": { "country": "DE" },
			            "rain": null,
			            "snow": null,
			            "clouds": { "all": 0 },
			            "weather": [
			                {
			                    "id": 800,
			                    "main": "Clear",
			                    "description": "clear sky",
			                    "icon": "01d"
			                }
			            ]
			        },
			        {
			            "id": 2944845,
			            "name": "Breg",
			            "coord": {
			                "lat": 48.05,
			                "lon": 8.2
			            },
			            "main": {
			                "temp": 273.7,
			                "feels_like": 270.29,
			                "temp_min": 272.59,
			                "temp_max": 274.82,
			                "pressure": 1028,
			                "humidity": 82
			            },
			            "dt": 1614582420,
			            "wind": {
			                "speed": 1.61,
			                "deg": 114
			            },
			            "sys": { "country": "DE" },
			            "rain": null,
			            "snow": null,
			            "clouds": { "all": 0 },
			            "weather": [
			                {
			                    "id": 800,
			                    "main": "Clear",
			                    "description": "clear sky",
			                    "icon": "01d"
			                }
			            ]
			        },
			        {
			            "id": 2898135,
			            "name": "Hübschental",
			            "coord": {
			                "lat": 48.05,
			                "lon": 8.15
			            },
			            "main": {
			                "temp": 273.7,
			                "feels_like": 270.26,
			                "temp_min": 272.59,
			                "temp_max": 274.82,
			                "pressure": 1028,
			                "humidity": 82
			            },
			            "dt": 1614582416,
			            "wind": {
			                "speed": 1.66,
			                "deg": 114
			            },
			            "sys": { "country": "DE" },
			            "rain": null,
			            "snow": null,
			            "clouds": { "all": 0 },
			            "weather": [
			                {
			                    "id": 800,
			                    "main": "Clear",
			                    "description": "clear sky",
			                    "icon": "01d"
			                }
			            ]
			        },
			        {
			            "id": 2913414,
			            "name": "Gütenbach",
			            "coord": {
			                "lat": 48.05,
			                "lon": 8.15
			            },
			            "main": {
			                "temp": 273.7,
			                "feels_like": 270.26,
			                "temp_min": 272.59,
			                "temp_max": 274.82,
			                "pressure": 1028,
			                "humidity": 82
			            },
			            "dt": 1614582416,
			            "wind": {
			                "speed": 1.66,
			                "deg": 114
			            },
			            "sys": { "country": "DE" },
			            "rain": null,
			            "snow": null,
			            "clouds": { "all": 0 },
			            "weather": [
			                {
			                    "id": 800,
			                    "main": "Clear",
			                    "description": "clear sky",
			                    "icon": "01d"
			                }
			            ]
			        },
			        {
			            "id": 6555822,
			            "name": "Gütenbach",
			            "coord": {
			                "lat": 48.05,
			                "lon": 8.15
			            },
			            "main": {
			                "temp": 273.7,
			                "feels_like": 270.26,
			                "temp_min": 272.59,
			                "temp_max": 274.82,
			                "pressure": 1028,
			                "humidity": 82
			            },
			            "dt": 1614582883,
			            "wind": {
			                "speed": 1.66,
			                "deg": 114
			            },
			            "sys": { "country": "DE" },
			            "rain": null,
			            "snow": null,
			            "clouds": { "all": 0 },
			            "weather": [
			                {
			                    "id": 800,
			                    "main": "Clear",
			                    "description": "clear sky",
			                    "icon": "01d"
			                }
			            ]
			        }
			    ]
			}
		''')
		
		Assertions.assertNotNull(json_weather)
		val errors = json_weather.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	
}
