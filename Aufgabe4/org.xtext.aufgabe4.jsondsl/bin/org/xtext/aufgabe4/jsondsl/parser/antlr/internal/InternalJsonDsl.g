/*
 * generated by Xtext 2.25.0
 */
grammar InternalJsonDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.aufgabe4.jsondsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.aufgabe4.jsondsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.aufgabe4.jsondsl.services.JsonDslGrammarAccess;

}

@parser::members {

 	private JsonDslGrammarAccess grammarAccess;

    public InternalJsonDslParser(TokenStream input, JsonDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "JSON_Document";
   	}

   	@Override
   	protected JsonDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleJSON_Document
entryRuleJSON_Document returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJSON_DocumentRule()); }
	iv_ruleJSON_Document=ruleJSON_Document
	{ $current=$iv_ruleJSON_Document.current; }
	EOF;

// Rule JSON_Document
ruleJSON_Document returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getJSON_DocumentAccess().getJson_valueJSON_ValueParserRuleCall_0());
			}
			lv_json_value_0_0=ruleJSON_Value
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getJSON_DocumentRule());
				}
				set(
					$current,
					"json_value",
					lv_json_value_0_0,
					"org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_Value");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleJSON_Value
entryRuleJSON_Value returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJSON_ValueRule()); }
	iv_ruleJSON_Value=ruleJSON_Value
	{ $current=$iv_ruleJSON_Value.current; }
	EOF;

// Rule JSON_Value
ruleJSON_Value returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getJSON_ValueAccess().getJson_valueJSON_ArrayParserRuleCall_0_0());
				}
				lv_json_value_0_1=ruleJSON_Array
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJSON_ValueRule());
					}
					set(
						$current,
						"json_value",
						lv_json_value_0_1,
						"org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_Array");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getJSON_ValueAccess().getJson_valueJSON_StringParserRuleCall_0_1());
				}
				lv_json_value_0_2=ruleJSON_String
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJSON_ValueRule());
					}
					set(
						$current,
						"json_value",
						lv_json_value_0_2,
						"org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_String");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getJSON_ValueAccess().getJson_valueJSON_BooleanParserRuleCall_0_2());
				}
				lv_json_value_0_3=ruleJSON_Boolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJSON_ValueRule());
					}
					set(
						$current,
						"json_value",
						lv_json_value_0_3,
						"org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_Boolean");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getJSON_ValueAccess().getJson_valueJSON_NumberParserRuleCall_0_3());
				}
				lv_json_value_0_4=ruleJSON_Number
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJSON_ValueRule());
					}
					set(
						$current,
						"json_value",
						lv_json_value_0_4,
						"org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_Number");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getJSON_ValueAccess().getJson_valueJSON_ObjectParserRuleCall_0_4());
				}
				lv_json_value_0_5=ruleJSON_Object
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJSON_ValueRule());
					}
					set(
						$current,
						"json_value",
						lv_json_value_0_5,
						"org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_Object");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleJSON_Array
entryRuleJSON_Array returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJSON_ArrayRule()); }
	iv_ruleJSON_Array=ruleJSON_Array
	{ $current=$iv_ruleJSON_Array.current; }
	EOF;

// Rule JSON_Array
ruleJSON_Array returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getJSON_ArrayAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJSON_ArrayAccess().getFirstJSON_ValueParserRuleCall_1_0());
				}
				lv_first_1_0=ruleJSON_Value
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJSON_ArrayRule());
					}
					set(
						$current,
						"first",
						lv_first_1_0,
						"org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getJSON_ArrayAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getJSON_ArrayAccess().getOtherJSON_ValueParserRuleCall_2_1_0());
					}
					lv_other_3_0=ruleJSON_Value
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJSON_ArrayRule());
						}
						add(
							$current,
							"other",
							lv_other_3_0,
							"org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getJSON_ArrayAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleJSON_String
entryRuleJSON_String returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJSON_StringRule()); }
	iv_ruleJSON_String=ruleJSON_String
	{ $current=$iv_ruleJSON_String.current; }
	EOF;

// Rule JSON_String
ruleJSON_String returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_json_string_0_0=RULE_STRING
			{
				newLeafNode(lv_json_string_0_0, grammarAccess.getJSON_StringAccess().getJson_stringSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getJSON_StringRule());
				}
				setWithLastConsumed(
					$current,
					"json_string",
					lv_json_string_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleJSON_Boolean
entryRuleJSON_Boolean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJSON_BooleanRule()); }
	iv_ruleJSON_Boolean=ruleJSON_Boolean
	{ $current=$iv_ruleJSON_Boolean.current; }
	EOF;

// Rule JSON_Boolean
ruleJSON_Boolean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_json_boolean_0_1='true'
				{
					newLeafNode(lv_json_boolean_0_1, grammarAccess.getJSON_BooleanAccess().getJson_booleanTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJSON_BooleanRule());
					}
					setWithLastConsumed($current, "json_boolean", lv_json_boolean_0_1, null);
				}
				    |
				lv_json_boolean_0_2='false'
				{
					newLeafNode(lv_json_boolean_0_2, grammarAccess.getJSON_BooleanAccess().getJson_booleanFalseKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJSON_BooleanRule());
					}
					setWithLastConsumed($current, "json_boolean", lv_json_boolean_0_2, null);
				}
				    |
				lv_json_boolean_0_3='null'
				{
					newLeafNode(lv_json_boolean_0_3, grammarAccess.getJSON_BooleanAccess().getJson_booleanNullKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJSON_BooleanRule());
					}
					setWithLastConsumed($current, "json_boolean", lv_json_boolean_0_3, null);
				}
			)
		)
	)
;

// Entry rule entryRuleJSON_Number
entryRuleJSON_Number returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJSON_NumberRule()); }
	iv_ruleJSON_Number=ruleJSON_Number
	{ $current=$iv_ruleJSON_Number.current; }
	EOF;

// Rule JSON_Number
ruleJSON_Number returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='-'
			{
				newLeafNode(otherlv_0, grammarAccess.getJSON_NumberAccess().getHyphenMinusKeyword_0());
			}
		)?
		(
			(
				lv_zahl_1_0=RULE_INT
				{
					newLeafNode(lv_zahl_1_0, grammarAccess.getJSON_NumberAccess().getZahlINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJSON_NumberRule());
					}
					setWithLastConsumed(
						$current,
						"zahl",
						lv_zahl_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)?
		(
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getJSON_NumberAccess().getFullStopKeyword_2_0());
			}
			(
				(
					lv_komma_3_0=RULE_INT
					{
						newLeafNode(lv_komma_3_0, grammarAccess.getJSON_NumberAccess().getKommaINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getJSON_NumberRule());
						}
						setWithLastConsumed(
							$current,
							"komma",
							lv_komma_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		(
			(
				otherlv_4='E'
				{
					newLeafNode(otherlv_4, grammarAccess.getJSON_NumberAccess().getEKeyword_3_0_0());
				}
				    |
				otherlv_5='e'
				{
					newLeafNode(otherlv_5, grammarAccess.getJSON_NumberAccess().getEKeyword_3_0_1());
				}
			)
			(
				otherlv_6='-'
				{
					newLeafNode(otherlv_6, grammarAccess.getJSON_NumberAccess().getHyphenMinusKeyword_3_1_0());
				}
				    |
				otherlv_7='+'
				{
					newLeafNode(otherlv_7, grammarAccess.getJSON_NumberAccess().getPlusSignKeyword_3_1_1());
				}
			)?
			(
				(
					lv_expo_8_0=RULE_INT
					{
						newLeafNode(lv_expo_8_0, grammarAccess.getJSON_NumberAccess().getExpoINTTerminalRuleCall_3_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getJSON_NumberRule());
						}
						setWithLastConsumed(
							$current,
							"expo",
							lv_expo_8_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleJSON_Member
entryRuleJSON_Member returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJSON_MemberRule()); }
	iv_ruleJSON_Member=ruleJSON_Member
	{ $current=$iv_ruleJSON_Member.current; }
	EOF;

// Rule JSON_Member
ruleJSON_Member returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getJSON_MemberAccess().getJson_memberJSON_StringParserRuleCall_0_0());
				}
				lv_json_member_0_0=ruleJSON_String
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJSON_MemberRule());
					}
					set(
						$current,
						"json_member",
						lv_json_member_0_0,
						"org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_String");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getJSON_MemberAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJSON_MemberAccess().getJson_valueJSON_ValueParserRuleCall_2_0());
				}
				lv_json_value_2_0=ruleJSON_Value
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJSON_MemberRule());
					}
					set(
						$current,
						"json_value",
						lv_json_value_2_0,
						"org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleJSON_Object
entryRuleJSON_Object returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJSON_ObjectRule()); }
	iv_ruleJSON_Object=ruleJSON_Object
	{ $current=$iv_ruleJSON_Object.current; }
	EOF;

// Rule JSON_Object
ruleJSON_Object returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getJSON_ObjectAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJSON_ObjectAccess().getFirstJSON_MemberParserRuleCall_1_0());
				}
				lv_first_1_0=ruleJSON_Member
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJSON_ObjectRule());
					}
					set(
						$current,
						"first",
						lv_first_1_0,
						"org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_Member");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getJSON_ObjectAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getJSON_ObjectAccess().getOtherJSON_MemberParserRuleCall_2_1_0());
					}
					lv_other_3_0=ruleJSON_Member
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJSON_ObjectRule());
						}
						add(
							$current,
							"other",
							lv_other_3_0,
							"org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_Member");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getJSON_ObjectAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
