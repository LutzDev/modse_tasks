/*
 * generated by Xtext 2.25.0
 */
package org.xtext.aufgabe4.jsondsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.aufgabe4.jsondsl.services.JsonDslGrammarAccess;

@SuppressWarnings("all")
public class JsonDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected JsonDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_JSON_Number_EKeyword_3_0_0_or_EKeyword_3_0_1;
	protected AbstractElementAlias match_JSON_Number_HyphenMinusKeyword_0_q;
	protected AbstractElementAlias match_JSON_Number___HyphenMinusKeyword_3_1_0_or_PlusSignKeyword_3_1_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (JsonDslGrammarAccess) access;
		match_JSON_Number_EKeyword_3_0_0_or_EKeyword_3_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getJSON_NumberAccess().getEKeyword_3_0_0()), new TokenAlias(false, false, grammarAccess.getJSON_NumberAccess().getEKeyword_3_0_1()));
		match_JSON_Number_HyphenMinusKeyword_0_q = new TokenAlias(false, true, grammarAccess.getJSON_NumberAccess().getHyphenMinusKeyword_0());
		match_JSON_Number___HyphenMinusKeyword_3_1_0_or_PlusSignKeyword_3_1_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getJSON_NumberAccess().getHyphenMinusKeyword_3_1_0()), new TokenAlias(false, false, grammarAccess.getJSON_NumberAccess().getPlusSignKeyword_3_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_JSON_Number_EKeyword_3_0_0_or_EKeyword_3_0_1.equals(syntax))
				emit_JSON_Number_EKeyword_3_0_0_or_EKeyword_3_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_JSON_Number_HyphenMinusKeyword_0_q.equals(syntax))
				emit_JSON_Number_HyphenMinusKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_JSON_Number___HyphenMinusKeyword_3_1_0_or_PlusSignKeyword_3_1_1__q.equals(syntax))
				emit_JSON_Number___HyphenMinusKeyword_3_1_0_or_PlusSignKeyword_3_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'E' | 'e'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '-'? (ambiguity) ('-' | '+')? expo=INT
	 *     komma=INT (ambiguity) ('-' | '+')? expo=INT
	 *     zahl=INT (ambiguity) ('-' | '+')? expo=INT
	 */
	protected void emit_JSON_Number_EKeyword_3_0_0_or_EKeyword_3_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '-'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '.' komma=INT
	 *     (rule start) (ambiguity) ('E' | 'e') ('-' | '+')? expo=INT
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) zahl=INT
	 */
	protected void emit_JSON_Number_HyphenMinusKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('-' | '+')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '-'? ('E' | 'e') (ambiguity) expo=INT
	 *     komma=INT ('E' | 'e') (ambiguity) expo=INT
	 *     zahl=INT ('E' | 'e') (ambiguity) expo=INT
	 */
	protected void emit_JSON_Number___HyphenMinusKeyword_3_1_0_or_PlusSignKeyword_3_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
