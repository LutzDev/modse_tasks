/*
 * generated by Xtext 2.25.0
 */
package org.xtext.aufgabe4.jsondsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JsonDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class JSON_DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_Document");
		private final Assignment cJson_valueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cJson_valueJSON_ValueParserRuleCall_0 = (RuleCall)cJson_valueAssignment.eContents().get(0);
		
		//JSON_Document:
		//    json_value = JSON_Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//json_value = JSON_Value
		public Assignment getJson_valueAssignment() { return cJson_valueAssignment; }
		
		//JSON_Value
		public RuleCall getJson_valueJSON_ValueParserRuleCall_0() { return cJson_valueJSON_ValueParserRuleCall_0; }
	}
	public class JSON_ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_Value");
		private final Assignment cJson_valueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cJson_valueAlternatives_0 = (Alternatives)cJson_valueAssignment.eContents().get(0);
		private final RuleCall cJson_valueJSON_ArrayParserRuleCall_0_0 = (RuleCall)cJson_valueAlternatives_0.eContents().get(0);
		private final RuleCall cJson_valueJSON_StringParserRuleCall_0_1 = (RuleCall)cJson_valueAlternatives_0.eContents().get(1);
		private final RuleCall cJson_valueJSON_BooleanParserRuleCall_0_2 = (RuleCall)cJson_valueAlternatives_0.eContents().get(2);
		private final RuleCall cJson_valueJSON_NumberParserRuleCall_0_3 = (RuleCall)cJson_valueAlternatives_0.eContents().get(3);
		private final RuleCall cJson_valueJSON_ObjectParserRuleCall_0_4 = (RuleCall)cJson_valueAlternatives_0.eContents().get(4);
		
		////Welche Values k√∂nnen enthalten sein
		//JSON_Value:
		//    json_value = (JSON_Array | JSON_String | JSON_Boolean | JSON_Number | JSON_Object)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//json_value = (JSON_Array | JSON_String | JSON_Boolean | JSON_Number | JSON_Object)
		public Assignment getJson_valueAssignment() { return cJson_valueAssignment; }
		
		//(JSON_Array | JSON_String | JSON_Boolean | JSON_Number | JSON_Object)
		public Alternatives getJson_valueAlternatives_0() { return cJson_valueAlternatives_0; }
		
		//JSON_Array
		public RuleCall getJson_valueJSON_ArrayParserRuleCall_0_0() { return cJson_valueJSON_ArrayParserRuleCall_0_0; }
		
		//JSON_String
		public RuleCall getJson_valueJSON_StringParserRuleCall_0_1() { return cJson_valueJSON_StringParserRuleCall_0_1; }
		
		//JSON_Boolean
		public RuleCall getJson_valueJSON_BooleanParserRuleCall_0_2() { return cJson_valueJSON_BooleanParserRuleCall_0_2; }
		
		//JSON_Number
		public RuleCall getJson_valueJSON_NumberParserRuleCall_0_3() { return cJson_valueJSON_NumberParserRuleCall_0_3; }
		
		//JSON_Object
		public RuleCall getJson_valueJSON_ObjectParserRuleCall_0_4() { return cJson_valueJSON_ObjectParserRuleCall_0_4; }
	}
	public class JSON_ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstJSON_ValueParserRuleCall_1_0 = (RuleCall)cFirstAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOtherAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOtherJSON_ValueParserRuleCall_2_1_0 = (RuleCall)cOtherAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////Wie ist ein Array aufgebaut
		//JSON_Array:
		//    '['first = JSON_Value (',' other +=JSON_Value)*']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'['first = JSON_Value (',' other +=JSON_Value)*']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//first = JSON_Value
		public Assignment getFirstAssignment_1() { return cFirstAssignment_1; }
		
		//JSON_Value
		public RuleCall getFirstJSON_ValueParserRuleCall_1_0() { return cFirstJSON_ValueParserRuleCall_1_0; }
		
		//(',' other +=JSON_Value)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//other +=JSON_Value
		public Assignment getOtherAssignment_2_1() { return cOtherAssignment_2_1; }
		
		//JSON_Value
		public RuleCall getOtherJSON_ValueParserRuleCall_2_1_0() { return cOtherJSON_ValueParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class JSON_StringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_String");
		private final Assignment cJson_stringAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cJson_stringSTRINGTerminalRuleCall_0 = (RuleCall)cJson_stringAssignment.eContents().get(0);
		
		////Wie ist ein String aufgebaut
		//JSON_String:
		//    json_string = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//json_string = STRING
		public Assignment getJson_stringAssignment() { return cJson_stringAssignment; }
		
		//STRING
		public RuleCall getJson_stringSTRINGTerminalRuleCall_0() { return cJson_stringSTRINGTerminalRuleCall_0; }
	}
	public class JSON_BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_Boolean");
		private final Assignment cJson_booleanAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cJson_booleanAlternatives_0 = (Alternatives)cJson_booleanAssignment.eContents().get(0);
		private final Keyword cJson_booleanTrueKeyword_0_0 = (Keyword)cJson_booleanAlternatives_0.eContents().get(0);
		private final Keyword cJson_booleanFalseKeyword_0_1 = (Keyword)cJson_booleanAlternatives_0.eContents().get(1);
		private final Keyword cJson_booleanNullKeyword_0_2 = (Keyword)cJson_booleanAlternatives_0.eContents().get(2);
		
		////Wie ist ein Boolean aufgebaut
		//JSON_Boolean:
		//    json_boolean = ('true'|'false'|'null')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//json_boolean = ('true'|'false'|'null')
		public Assignment getJson_booleanAssignment() { return cJson_booleanAssignment; }
		
		//('true'|'false'|'null')
		public Alternatives getJson_booleanAlternatives_0() { return cJson_booleanAlternatives_0; }
		
		//'true'
		public Keyword getJson_booleanTrueKeyword_0_0() { return cJson_booleanTrueKeyword_0_0; }
		
		//'false'
		public Keyword getJson_booleanFalseKeyword_0_1() { return cJson_booleanFalseKeyword_0_1; }
		
		//'null'
		public Keyword getJson_booleanNullKeyword_0_2() { return cJson_booleanNullKeyword_0_2; }
	}
	public class JSON_NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cZahlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cZahlINTTerminalRuleCall_1_0 = (RuleCall)cZahlAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cKommaAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cKommaINTTerminalRuleCall_2_1_0 = (RuleCall)cKommaAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cEKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cEKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final Assignment cExpoAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExpoINTTerminalRuleCall_3_2_0 = (RuleCall)cExpoAssignment_3_2.eContents().get(0);
		
		//JSON_Number:
		//    '-'? zahl = INT? ('.' komma = INT)? (('E'|'e') ('-'|'+')? expo  = INT)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? zahl = INT? ('.' komma = INT)? (('E'|'e') ('-'|'+')? expo  = INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//zahl = INT?
		public Assignment getZahlAssignment_1() { return cZahlAssignment_1; }
		
		//INT
		public RuleCall getZahlINTTerminalRuleCall_1_0() { return cZahlINTTerminalRuleCall_1_0; }
		
		//('.' komma = INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//komma = INT
		public Assignment getKommaAssignment_2_1() { return cKommaAssignment_2_1; }
		
		//INT
		public RuleCall getKommaINTTerminalRuleCall_2_1_0() { return cKommaINTTerminalRuleCall_2_1_0; }
		
		//(('E'|'e') ('-'|'+')? expo  = INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//('E'|'e')
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'E'
		public Keyword getEKeyword_3_0_0() { return cEKeyword_3_0_0; }
		
		//'e'
		public Keyword getEKeyword_3_0_1() { return cEKeyword_3_0_1; }
		
		//('-'|'+')?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3_1_0() { return cHyphenMinusKeyword_3_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_3_1_1() { return cPlusSignKeyword_3_1_1; }
		
		//expo  = INT
		public Assignment getExpoAssignment_3_2() { return cExpoAssignment_3_2; }
		
		//INT
		public RuleCall getExpoINTTerminalRuleCall_3_2_0() { return cExpoINTTerminalRuleCall_3_2_0; }
	}
	public class JSON_MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cJson_memberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cJson_memberJSON_StringParserRuleCall_0_0 = (RuleCall)cJson_memberAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cJson_valueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cJson_valueJSON_ValueParserRuleCall_2_0 = (RuleCall)cJson_valueAssignment_2.eContents().get(0);
		
		//JSON_Member:
		//    json_member = JSON_String ':' json_value = JSON_Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//json_member = JSON_String ':' json_value = JSON_Value
		public Group getGroup() { return cGroup; }
		
		//json_member = JSON_String
		public Assignment getJson_memberAssignment_0() { return cJson_memberAssignment_0; }
		
		//JSON_String
		public RuleCall getJson_memberJSON_StringParserRuleCall_0_0() { return cJson_memberJSON_StringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//json_value = JSON_Value
		public Assignment getJson_valueAssignment_2() { return cJson_valueAssignment_2; }
		
		//JSON_Value
		public RuleCall getJson_valueJSON_ValueParserRuleCall_2_0() { return cJson_valueJSON_ValueParserRuleCall_2_0; }
	}
	public class JSON_ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.aufgabe4.jsondsl.JsonDsl.JSON_Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstJSON_MemberParserRuleCall_1_0 = (RuleCall)cFirstAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOtherAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOtherJSON_MemberParserRuleCall_2_1_0 = (RuleCall)cOtherAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JSON_Object:
		//    '{' first = JSON_Member (',' other += JSON_Member)*'}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'{' first = JSON_Member (',' other += JSON_Member)*'}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//first = JSON_Member
		public Assignment getFirstAssignment_1() { return cFirstAssignment_1; }
		
		//JSON_Member
		public RuleCall getFirstJSON_MemberParserRuleCall_1_0() { return cFirstJSON_MemberParserRuleCall_1_0; }
		
		//(',' other += JSON_Member)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//other += JSON_Member
		public Assignment getOtherAssignment_2_1() { return cOtherAssignment_2_1; }
		
		//JSON_Member
		public RuleCall getOtherJSON_MemberParserRuleCall_2_1_0() { return cOtherJSON_MemberParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	
	private final JSON_DocumentElements pJSON_Document;
	private final JSON_ValueElements pJSON_Value;
	private final JSON_ArrayElements pJSON_Array;
	private final JSON_StringElements pJSON_String;
	private final JSON_BooleanElements pJSON_Boolean;
	private final JSON_NumberElements pJSON_Number;
	private final JSON_MemberElements pJSON_Member;
	private final JSON_ObjectElements pJSON_Object;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JsonDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pJSON_Document = new JSON_DocumentElements();
		this.pJSON_Value = new JSON_ValueElements();
		this.pJSON_Array = new JSON_ArrayElements();
		this.pJSON_String = new JSON_StringElements();
		this.pJSON_Boolean = new JSON_BooleanElements();
		this.pJSON_Number = new JSON_NumberElements();
		this.pJSON_Member = new JSON_MemberElements();
		this.pJSON_Object = new JSON_ObjectElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.aufgabe4.jsondsl.JsonDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//JSON_Document:
	//    json_value = JSON_Value
	//;
	public JSON_DocumentElements getJSON_DocumentAccess() {
		return pJSON_Document;
	}
	
	public ParserRule getJSON_DocumentRule() {
		return getJSON_DocumentAccess().getRule();
	}
	
	////Welche Values k√∂nnen enthalten sein
	//JSON_Value:
	//    json_value = (JSON_Array | JSON_String | JSON_Boolean | JSON_Number | JSON_Object)
	//;
	public JSON_ValueElements getJSON_ValueAccess() {
		return pJSON_Value;
	}
	
	public ParserRule getJSON_ValueRule() {
		return getJSON_ValueAccess().getRule();
	}
	
	////Wie ist ein Array aufgebaut
	//JSON_Array:
	//    '['first = JSON_Value (',' other +=JSON_Value)*']'
	//;
	public JSON_ArrayElements getJSON_ArrayAccess() {
		return pJSON_Array;
	}
	
	public ParserRule getJSON_ArrayRule() {
		return getJSON_ArrayAccess().getRule();
	}
	
	////Wie ist ein String aufgebaut
	//JSON_String:
	//    json_string = STRING
	//;
	public JSON_StringElements getJSON_StringAccess() {
		return pJSON_String;
	}
	
	public ParserRule getJSON_StringRule() {
		return getJSON_StringAccess().getRule();
	}
	
	////Wie ist ein Boolean aufgebaut
	//JSON_Boolean:
	//    json_boolean = ('true'|'false'|'null')
	//;
	public JSON_BooleanElements getJSON_BooleanAccess() {
		return pJSON_Boolean;
	}
	
	public ParserRule getJSON_BooleanRule() {
		return getJSON_BooleanAccess().getRule();
	}
	
	//JSON_Number:
	//    '-'? zahl = INT? ('.' komma = INT)? (('E'|'e') ('-'|'+')? expo  = INT)?
	//;
	public JSON_NumberElements getJSON_NumberAccess() {
		return pJSON_Number;
	}
	
	public ParserRule getJSON_NumberRule() {
		return getJSON_NumberAccess().getRule();
	}
	
	//JSON_Member:
	//    json_member = JSON_String ':' json_value = JSON_Value
	//;
	public JSON_MemberElements getJSON_MemberAccess() {
		return pJSON_Member;
	}
	
	public ParserRule getJSON_MemberRule() {
		return getJSON_MemberAccess().getRule();
	}
	
	//JSON_Object:
	//    '{' first = JSON_Member (',' other += JSON_Member)*'}'
	//;
	public JSON_ObjectElements getJSON_ObjectAccess() {
		return pJSON_Object;
	}
	
	public ParserRule getJSON_ObjectRule() {
		return getJSON_ObjectAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
