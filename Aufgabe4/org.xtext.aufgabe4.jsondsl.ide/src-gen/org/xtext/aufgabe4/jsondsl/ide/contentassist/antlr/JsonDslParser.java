/*
 * generated by Xtext 2.25.0
 */
package org.xtext.aufgabe4.jsondsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.aufgabe4.jsondsl.ide.contentassist.antlr.internal.InternalJsonDslParser;
import org.xtext.aufgabe4.jsondsl.services.JsonDslGrammarAccess;

public class JsonDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(JsonDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, JsonDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getJSON_ValueAccess().getJson_valueAlternatives_0(), "rule__JSON_Value__Json_valueAlternatives_0");
			builder.put(grammarAccess.getJSON_BooleanAccess().getJson_booleanAlternatives_0(), "rule__JSON_Boolean__Json_booleanAlternatives_0");
			builder.put(grammarAccess.getJSON_NumberAccess().getAlternatives_3_0(), "rule__JSON_Number__Alternatives_3_0");
			builder.put(grammarAccess.getJSON_NumberAccess().getAlternatives_3_1(), "rule__JSON_Number__Alternatives_3_1");
			builder.put(grammarAccess.getJSON_ArrayAccess().getGroup(), "rule__JSON_Array__Group__0");
			builder.put(grammarAccess.getJSON_ArrayAccess().getGroup_2(), "rule__JSON_Array__Group_2__0");
			builder.put(grammarAccess.getJSON_NumberAccess().getGroup(), "rule__JSON_Number__Group__0");
			builder.put(grammarAccess.getJSON_NumberAccess().getGroup_2(), "rule__JSON_Number__Group_2__0");
			builder.put(grammarAccess.getJSON_NumberAccess().getGroup_3(), "rule__JSON_Number__Group_3__0");
			builder.put(grammarAccess.getJSON_MemberAccess().getGroup(), "rule__JSON_Member__Group__0");
			builder.put(grammarAccess.getJSON_ObjectAccess().getGroup(), "rule__JSON_Object__Group__0");
			builder.put(grammarAccess.getJSON_ObjectAccess().getGroup_2(), "rule__JSON_Object__Group_2__0");
			builder.put(grammarAccess.getJSON_DocumentAccess().getJson_valueAssignment(), "rule__JSON_Document__Json_valueAssignment");
			builder.put(grammarAccess.getJSON_ValueAccess().getJson_valueAssignment(), "rule__JSON_Value__Json_valueAssignment");
			builder.put(grammarAccess.getJSON_ArrayAccess().getFirstAssignment_1(), "rule__JSON_Array__FirstAssignment_1");
			builder.put(grammarAccess.getJSON_ArrayAccess().getOtherAssignment_2_1(), "rule__JSON_Array__OtherAssignment_2_1");
			builder.put(grammarAccess.getJSON_StringAccess().getJson_stringAssignment(), "rule__JSON_String__Json_stringAssignment");
			builder.put(grammarAccess.getJSON_BooleanAccess().getJson_booleanAssignment(), "rule__JSON_Boolean__Json_booleanAssignment");
			builder.put(grammarAccess.getJSON_NumberAccess().getZahlAssignment_1(), "rule__JSON_Number__ZahlAssignment_1");
			builder.put(grammarAccess.getJSON_NumberAccess().getKommaAssignment_2_1(), "rule__JSON_Number__KommaAssignment_2_1");
			builder.put(grammarAccess.getJSON_NumberAccess().getExpoAssignment_3_2(), "rule__JSON_Number__ExpoAssignment_3_2");
			builder.put(grammarAccess.getJSON_MemberAccess().getJson_memberAssignment_0(), "rule__JSON_Member__Json_memberAssignment_0");
			builder.put(grammarAccess.getJSON_MemberAccess().getJson_valueAssignment_2(), "rule__JSON_Member__Json_valueAssignment_2");
			builder.put(grammarAccess.getJSON_ObjectAccess().getFirstAssignment_1(), "rule__JSON_Object__FirstAssignment_1");
			builder.put(grammarAccess.getJSON_ObjectAccess().getOtherAssignment_2_1(), "rule__JSON_Object__OtherAssignment_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private JsonDslGrammarAccess grammarAccess;

	@Override
	protected InternalJsonDslParser createParser() {
		InternalJsonDslParser result = new InternalJsonDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public JsonDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(JsonDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
