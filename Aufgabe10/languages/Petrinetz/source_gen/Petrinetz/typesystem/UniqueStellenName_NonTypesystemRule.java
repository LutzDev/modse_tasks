package Petrinetz.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class UniqueStellenName_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public UniqueStellenName_NonTypesystemRule() {
  }
  public void applyRule(final SNode petrinetz, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    List<String> dups = ListSequence.fromList(new LinkedList<String>());

    for (SNode stelle : ListSequence.fromList(SLinkOperations.getChildren(petrinetz, LINKS.stellen$fpmA))) {
      if (!(ListSequence.fromList(dups).contains(SPropertyOperations.getString(stelle, PROPS.name$MnvL)))) {
        ListSequence.fromList(dups).addElement(SPropertyOperations.getString(stelle, PROPS.name$MnvL));
      }
    }

    if (ListSequence.fromList(SLinkOperations.getChildren(petrinetz, LINKS.stellen$fpmA)).count() != ListSequence.fromList(dups).count()) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(petrinetz, "Unique state name condition", "r:b62f06e7-402f-41ad-aefc-b0d588fc9e60(Petrinetz.typesystem)", "4062951142940437739", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Petrinetz$vh;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink stellen$fpmA = MetaAdapterFactory.getContainmentLink(0x8151472b9fd84208L, 0xa479dc05429f091aL, 0x5cf56a8db9cb9216L, 0x5cf56a8db9cb921dL, "stellen");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Petrinetz$vh = MetaAdapterFactory.getConcept(0x8151472b9fd84208L, 0xa479dc05429f091aL, 0x5cf56a8db9cb9216L, "Petrinetz.structure.Petrinetz");
  }
}
